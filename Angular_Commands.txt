ANGULAR COMMANDS

//create new app//

ng new ~APP NAME~
=====================================

//run in newly created app folder//

ng generate component my-component 

ng generate service my-service 

ng generate class my-class
=====================================

//run app//

ng serve
=====================================

//import into app.module.ts file//

import { FormsModule } from '@angular/forms'; // <-- Import FormsModule
import { HttpModule } from '@angular/http'; // <-- Import HttpModule

( - goes into imports:[]

FormsModule, // <-- Include module in our AppModules
HttpModule // <-- Include module in our AppModules )
=====================================

------------------------
- AppComponent          |
- TaskComponent         |
- TaskListComponent     |
- TaskNewComponent      |
- TaskService           |
------------------------

//To create the above App Structure//

ng new my-app
cd my-app
ng generate component task
cd src
cd app
cd task
ng generate component task-list
ng generate component task-new
ng generate service task
=====================================

//Steps to Integrate Angular with Express//

- Navigate to your Angular App and run ng build to create a 'dist' folder in your Angular App. 
(We will later have our Express project point to this directory as its static folder.)

- Move your Angular App inside of your Express project. 
(At the root directory of your express project).

- Within your server.js, set your Angular's 'dist' folder as the static folder 
app.use(express.static(path.join(__dirname, '/my-angular-app/dist')));
=======================================

//Steps to Run your Full MEAN Projects//

- Navigate to your Angular App's root directory and run ng build -w 
('-w' will run a mini server to keep updating our 'dist' folder as we make changes to our Angular files.)

- Navigate to our Express App's root directory and run nodemon server.js 
(This will run our Node server and restart the server anytime we make changes to our files.)